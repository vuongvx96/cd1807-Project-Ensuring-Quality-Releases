name: Azure Pipelines


trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - README.md
    - .gitignore
    - screenshots/

pool: Default

variables:
  python.version: '3.7.6'
  azureServiceConnectionId: '66ae631b-4172-4366-a513-25cda0f2ae75'
  projectRoot: $(System.DefaultWorkingDirectory)
  environmentName: 'test'

stages:
- stage: Provision
  jobs:
  - job: provision_azure_infrastructure
    displayName: Provision Azure Infrastructure
    steps:
    - task: DownloadSecureFile@1
      name: tfvardef
      displayName: Download terraform.tfvars
      inputs:
        secureFile: 'terraform.tfvars'

    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl'
        sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCxkv/9b4vys7KVVYsTkLni6u/Dopr2UyCIq9jPFfvdVNoN9+XzaOyxelro7YLPOggsmHfU9MupDw7ssw99MbLIbpltxyL9KJ2LyVDX9TL6Q//xp6XkASAEkevdEne3lHkmcV0+XLw2Zrqe0SMPw0d7FI63gWyfBUmNQb1r7Rzn3jmQFUdox4VVuwNhBJjWhYHIc6wwu5PFhIRFvERvJ5lOMhdvTkwZFYm0xBTvvAhoh/9C7Mgrt5Qo0QzwkAEK59utQA1oik/mVeUEXuWSXuHd1B86i0002OyZ/39DUNgtLlCjunGV3i1qIs/3etScaMMhW2KzPvMcwsRyjp7wP2tg0pbsELyCcEPKh+k5XyLf8xmWJz3IsWcbKPEiuKjEF59lEKrwhWuI/NPBubIWghtvEdyPMykaTpZJh3+4tjULc5XhZ/Pwq/bx7s/DCD4c2N6VxkAlOOZI1eZoC6YpRAm1aYnDGlIvLj/zFmlCAPCUdWDLZNWFUadqvYSZAJlzAhc= vuongvx@hotmail.com'
        sshKeySecureFile: 'id_rsa'

    - bash: |
        cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/environments/test
      displayName: Copy terraform.tfvars
    - bash: |
        echo Pipeline workspace dir is $(Pipeline.Workspace)
        echo Terraform variable definition file is $(tfvardef.secureFilePath)
        cd $(Agent.TempDirectory)
        pwd
        ls -la
        cat id_rsa.pub
        cd ~/.ssh/
        pwd
        ls -la
        cat known_hosts
        # $(System.DefaultWorkingDirectory) is equivalent to $(Build.SourcesDirectory)
        cd $(System.DefaultWorkingDirectory)  
        pwd
        ls -la
      displayName: Verify build environment (pre)

    - task: TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.2.9'

    - task: TerraformTaskV3@3
      displayName: Terraform Init
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'tfstate2344032495'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'

    - task: TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    - task: TerraformTaskV3@3
      displayName: Terraform plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    - task: TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

- stage: Build
  jobs:
  - job: build_artifacts
    displayName: Build Artifacts
    steps:
    - task: ArchiveFiles@2
      displayName: Archive FakeRestAPI
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        verbose: true

    - publish: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
      displayName: Publish FakeRestAPI artifact
      artifact: drop-fakerestapi

    - task: ArchiveFiles@2
      displayName: Archive Selenium
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        verbose: true

    - publish: $(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip
      displayName: Publish Selenium artifact
      artifact: 'drop-selenium'